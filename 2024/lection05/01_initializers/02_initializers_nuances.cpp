#include <iostream>

/* 
 * Этот пример специфичен для C++11.
 * Относительно старыми компиляторами даже не соберётся.
 */

using namespace std;

// Вспомогательный класс
class DataClass {
protected:
    int value;
public:
    // Строго конструктор с параметром,
    // без заданного значения объект создать нельзя
    DataClass(int a) {
        value = a;
    }
};

// Класс, в котором происходит всё действие
class A
{
private:
    // Поле const, в него вроде как нельзя писать
    const int param;
    // А это референс, он не может быть неприсвоен
    int &ref;
    // А DataClass создаётся строго с параметром
    DataClass data;

public:
    // Так можно инициализировать
    A(int a, int& b, int c): param(a), ref(b), data(c)
    {
        // А вот так нельзя:
        // param = a;
        // ref = b;
        // data = data(c);
        //
        // Потому что поля param, ref и data 
        // "должны быть инициализированы гарантированно и всегда",
        // они "ни секунды не могут жить в неясном состоянии".
        // Даже от начала работы конструктора и до момента присваивания.
    }
};

int main()
{
    int foo = 42;
    A a(1, foo, 0);

    return 0;
}
